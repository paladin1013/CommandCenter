classdef PowerScan < Modules.Experiment
    %Automatically takes Lifetime at sites
    
    properties
        prefs = {'resonatorStart', 'resonatorEnd', 'resonatorPoints', 'resonatorReverse', 'sweepRounds', 'arduinoAngles_str'};
        current_experiment = [];
        autosave = [];
    end
    properties(SetAccess=private,Hidden)
        abort_request = false;
        data = [];
        meta = [];
        arduinoAngles = [];
    end
    properties(SetObservable, GetObservable)
        experiment = Prefs.ModuleInstance(Experiments.ResonanceEMCCDonly.instance,'n',Inf,'inherits',{'Modules.Experiment'});
        
        wl = Prefs.ModuleInstance(Sources.WhiteLight_remote.instance, 'inherits', {'Modules.Source'});
        camera = Prefs.ModuleInstance(Imaging.Hamamatsu.instance, 'inherits', {'Modules.Imaging'});
        resonatorStart = Prefs.Double(0, 'min', 0, 'max', 100, 'unit', '%', 'help', 'Start value of resonator percents sweep in each widefield scan. (will also run the reverse sequence)');
        resonatorEnd = Prefs.Double(100, 'min', 0, 'max', 100, 'unit', '%', 'help', 'End value of resonator percents sweep in each widefield scan. (will also run the reverse sequence)');
        resonatorPoints = Prefs.Integer(1001, 'help', 'Total points of resonator percents sweep (one-way) in each widefield scan. (will also run the reverse sequence)');
        resonatorReverse = Prefs.Boolean(false, 'help', 'Reverse the resonator percent sequence.');
        sweepRounds = Prefs.Integer(1, 'min', 1, 'help', 'Sweep how many rounds on a single chiplet.');
        arduinoAngles_str = Prefs.String("linspace(0, 120, 7)", 'help', 'A string that assigns the angles of arduino OD wheel.', 'set', 'set_arduinoAngles_str');
        arduino = Drivers.ArduinoServo.instance("18.25.29.30", 2);
    end
    methods(Static)
        obj = instance();
    end
    methods(Access=private)
        function obj = PowerScan()
            obj.loadPrefs;
            if isempty(obj.arduino)
                obj.arduino = Drivers.ArduinoServo.instance("18.25.29.30", 2);
            end
            obj.arduinoAngles = eval(obj.arduinoAngles_str);
            obj.experiment = Experiments.ResonanceEMCCDonly.instance;
        end
    end
    methods

        
        function run(obj,statusH,managers,ax)
            if check_call_stack_func('grabFrame')
                error('Please stop Video then start the experiment.');
            end
            
            if obj.resonatorReverse
                resp = questdlg('Are you sure to reverse resonator percentscanning?');
                if ~strcmp(resp, "Yes")
                    error("Please cancel `resonatorReverse`.")
                end 
            end

            if ~obj.experiment.use_powermeter
                resp = questdlg('Are you sure not to read powermeter data?');
                if ~strcmp(resp, "Yes")
                    error("Please set `use_powermeter` in `ResonanceEMCCDonly` to true.")
                end 
            end

            obj.experiment.test_powermeter;

            if obj.experiment.wavemeter_override
                try
                    obj.experiment.wavemeter = Drivers.Wavemeter.instance('qplab-hwserver.mit.edu',obj.experiment.wavemeter_channel,true);
                    obj.experiment.wavemeter.SetSwitcherSignalState(1);
                catch err
                    warning(err.message);
                    obj.experiment.wavemeter.delete;
                    obj.experiment.wavemeter = Drivers.Wavemeter.instance('qplab-hwserver.mit.edu',obj.experiment.wavemeter_channel,true);
                end
            end
            if obj.camera.continuous
                obj.camera.stopVideo
            end
            timers = timerfindall;
            for k = 1:length(timers)
                if strcmp(timers(k).tag, 'Video Timer')
                    % There exists other timers generated by `Imaging.startVideo`
                    if strcmp(timers(k).Running, 'on')
                        stop(timers(k)); % Stop all other timers
                    end
                    delete(timers(k));
                end
            end


            obj.abort_request = false;
            obj.autosave = Databases.AutoSave.instance;
            c = fix(clock);
            if strcmp(obj.autosave.exp_dir, "")
                obj.autosave.change_exp_dir;
            end
            obj.wl.source_on = true;
            obj.wl.intensity = 100;
            obj.camera.exposure = 100;

            nAngles = length(obj.arduinoAngles);
            mkdir(fullfile(obj.autosave.exp_dir, sprintf("power_test_data_%d_%d", c(2), c(3))));
            wl_img = obj.camera.snapImage;
            figH = figure;
            axH = axes('Parent', figH);
            imH = imagesc(axH, wl_img);
            saveas(axH, fullfile(obj.autosave.exp_dir, sprintf("power_test_data_%d_%d", c(2), c(3)),  sprintf("whitelight.png", k)));
            save(fullfile(obj.autosave.exp_dir, sprintf("power_test_data_%d_%d", c(2), c(3)),  sprintf("whitelight.mat", k)), 'wl_img');
            obj.wl.source_on = false;
            obj.experiment.keep_entire_image = true;
            obj.experiment.set_ROI_automatic(wl_img);

            for k = 1:nAngles
                obj.arduino.angle = obj.arduinoAngles(k);
                pause(1);
                temp_power = obj.experiment.powermeter.get_power;
                fprintf("Current angle: %d (%d/%d), power: %d uW\n", obj.arduinoAngles(k), k, nAngles, temp_power);
                assert(~obj.abort_request, 'User aborted.');
                colormap('bone');

                widefieldData = cell(1, obj.sweepRounds);
                assert(~obj.abort_request, 'User aborted.');
                for l = 1:obj.sweepRounds
                    if ~obj.resonatorReverse % Begin from the `resonatorStart`
                        obj.experiment.percents = sprintf("linspace(%d, %d, %d)", obj.resonatorStart, obj.resonatorEnd, obj.resonatorPoints);
                    else
                        obj.experiment.percents = sprintf("linspace(%d, %d, %d)", obj.resonatorEnd, obj.resonatorStart, obj.resonatorPoints);
                    end
                    obj.runExperiment(managers, obj.experiment, ax);
                    widefieldData{l} = obj.experiment.processed_data;
                    assert(~obj.abort_request, 'User aborted.');
                    obj.resonatorReverse = ~obj.resonatorReverse;
                end
                data = struct('widefieldData', widefieldData, 'wl_img', wl_img);
                wait = msgbox('Please Wait, CommandCenter is saving data.');
                save(fullfile(obj.autosave.exp_dir, sprintf("power_test_data_%d_%d", c(2), c(3)), sprintf("arduino_angle_%d.mat", obj.arduinoAngles(k))), 'widefieldData', 'wl_img');
                try
                    delete(wait);
                end
            end
        end
        
        function runExperiment(obj,managers,experiment,ax)
            [abortBox,abortH] = ExperimentManager.abortBox(class(experiment),@(~,~)obj.abort);
            try
                drawnow; assert(~obj.abort_request,'User aborted');
                obj.current_experiment = experiment;
                experiment.run(abortBox,managers,ax);
                obj.current_experiment = [];
            catch exp_err
                delete(abortH);
                rethrow(exp_err)
            end
            delete(abortH);
        end

        function PreRun(obj,status,managers,ax)

        end
        
        function PostRun(obj,status,managers,ax)

        end
        

        function abort(obj)
            obj.abort_request = true;
            if ~isempty(obj.experiment)
                obj.experiment.abort;
            end
            obj.logger.log('Abort requested');
        end
        function dat = GetData(obj,~,~)
            % Callback for saving methods (note, lots more info in the two managers input!)
            dat = [];
            for i=1:length(obj.prefs)
                obj.meta = setfield(obj.meta,obj.prefs{i},getfield(obj,obj.prefs{i}));
            end
            
            dat.data = obj.data;
            dat.meta = obj.meta;
        end
        function UpdateRun(obj,~,~,ax)
        end
        function val = set_arduinoAngles_str(obj, val, ~)
            obj.arduinoAngles = eval(val);
        end
    end
end
